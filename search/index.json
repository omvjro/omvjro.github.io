[{"content":"如先前所述，利用 JavaScript 实现的变体转换存在需要额外创建繁体标题重定向的问题。和更改站点内容语言一样，对于已有一定规模的 wiki 来说，这是很麻烦的一件事。\n手动创建脚本 利用此脚本可以为每个页面添加快速创建繁体重定向的按钮，所依赖的 API 有 jQuery、openccjs，以及 MediaWiki 自身提供的 Action API。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 $(function () { // 仅在内容页面启用 if (!mw.config.get( \u0026#39;wgIsArticle\u0026#39; ) || mw.config.get( \u0026#39;wgPageContentModel\u0026#39; ) !== \u0026#39;wikitext\u0026#39;) { return } // 检查重定向页面是否已存在 const ifExist = title =\u0026gt; { return new Promise(resolve =\u0026gt; { new mw.Api().get({ action: \u0026#39;parse\u0026#39;, page: title, }).done(() =\u0026gt; { resolve(1); }).fail(() =\u0026gt; { resolve(0); }); }); } // 添加按钮至“Wiki工具”栏，可按需修改 $(\u0026#39;#site-tools ul\u0026#39;).append(\u0026#39;\u0026lt;li class=\u0026#34;mw-list-item\u0026#34; id=\u0026#34;t-tradredirect\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt;创建繁体重定向\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;); document.getElementById(\u0026#39;t-tradredirect\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, async () =\u0026gt; { const msg = m =\u0026gt; document.getElementById(\u0026#39;t-tradredirect\u0026#39;).innerHTML = m; msg(\u0026#39;请稍候\u0026#39;); let title = mw.config.get(\u0026#39;wgPageName\u0026#39;); // 使用了简体 -\u0026gt; 台繁，如有需要也可增添港繁（将 tw 修改为 hk ） const converter = OpenCC.Converter({ from: \u0026#39;cn\u0026#39;, to: \u0026#39;tw\u0026#39; }); let tradtitle = converter(title); if (tradtitle == title) { msg(\u0026#39;无需创建繁体重定向\u0026#39;); return; } if (await ifExist(tradtitle)) { msg(\u0026#39;已有繁体重定向\u0026#39;); return; } console.log(`${tradtitle} =\u0026gt; ${title}`); new mw.Api().postWithToken(\u0026#39;csrf\u0026#39;, { action: \u0026#39;edit\u0026#39;, text: `#重定向 [[${title}]]`, title: tradtitle, summary: `创建繁体重定向`, errorformat: \u0026#39;plaintext\u0026#39; }).done(() =\u0026gt; { msg(\u0026#39;创建成功\u0026#39;); }).fail((a, b, errorThrown) =\u0026gt; { msg(\u0026#39;出错了\u0026#39;); console.error(errorThrown); }); }); }); 请注意 MediaWiki 仍然无法使用 ES6 语法，因此可将以上脚本通过油猴等方法加载以使用。\nGadget 可以利用 Gadget 将脚本设置为可供用户启用，便于编辑者自助添加繁体重定向。此外，Gadget 似乎可以使用 ES6 语法。\nExtension:Gadgets 处理历史遗留问题 理论上，使用 Pywikibot 可以更妥当地批量处理先前的页面。然而，Pywikibot 的文档看上去就很麻烦，而且本人 Python 水平比 JavaScript 更低。鉴于 DOL 中文 wiki 页面尚不算多，直接照前文又画了一个 JavaScript 脚本了事。到 wiki 的 特殊:所有页面，在每一页打开控制台运行以下脚本即可。\n建议使用机器人账户进行以下操作。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 const ifExist = title =\u0026gt; { return new Promise(resolve =\u0026gt; { new mw.Api().get({ action: \u0026#39;parse\u0026#39;, page: title, }).done(() =\u0026gt; { resolve(1); }).fail(() =\u0026gt; { resolve(0); }); }); } // 获取需操作页面的标题 let link_list = []; document.querySelectorAll(\u0026#39;.mw-allpages-body li a\u0026#39;).forEach( a =\u0026gt; { // 排除重定向页面 if (a.classList.contains(\u0026#39;mw-redirect\u0026#39;)) { return; } let title = a.innerText; const converter = OpenCC.Converter({ from: \u0026#39;cn\u0026#39;, to: \u0026#39;tw\u0026#39; }); // 排除简繁标题一致页面 let tradtitle = converter(title); if (tradtitle == title) { return; } link_list.push(title); }); link_list.forEach( async (title) =\u0026gt; { const converter = OpenCC.Converter({ from: \u0026#39;cn\u0026#39;, to: \u0026#39;tw\u0026#39; }); let tradtitle = converter(title); if (await ifExist(tradtitle)) { console.log(`${tradtitle} =\u0026gt; ${title}已有繁体重定向`); return; } new mw.Api().postWithToken(\u0026#39;csrf\u0026#39;, { action: \u0026#39;edit\u0026#39;, text: `#重定向 [[${title}]]`, title: tradtitle, bot: true, // 标记为机器人操作，避免刷屏 summary: `创建繁体重定向`, errorformat: \u0026#39;plaintext\u0026#39; }).done(() =\u0026gt; { console.log(`${tradtitle} =\u0026gt; ${title}创建成功`); }).fail((a, b, errorThrown) =\u0026gt; { console.error(`${tradtitle} =\u0026gt; ${title}创建出错`); console.error(errorThrown); }); }); ","date":"2023-12-16T00:00:00Z","permalink":"https://omvjro.github.io/p/mediawiki-%E8%AF%AD%E8%A8%80%E5%8F%98%E4%BD%93%E8%A1%A5%E9%81%97/","title":"Mediawiki 语言变体补遗"},{"content":"在 DOL 中文 wiki 中，或由于初始设置失误，语言设置为 zh-CN 而非 zh。根据 MediaWiki 文档，只有语言设置为 zh 才能启用自带的变体转换功能（以 $wgDisableLangConversion 设置）。\n用户界面语言和站点内容语言 首先需由文档明确，MediaWiki 的语言分为三种：\n站点内容语言（Site content language） 用户界面语言（User interface language，API 调用为 mw.user.options.values.language） 页面内容语言（Page content language） 其中页面内容语言极少需要配置，绝大部分情况下，都默认与 站点内容语言 一致，在此忽略。\n站点内容语言 决定了 html 的 lang 属性，在默认情况下，也决定了 wiki 具体内容的语言，实际使用上，主要有标题（#firstHeading）和内容（#mw-content-text）两部分。\n用户界面语言 决定了基础界面的 lang 属性，这些基础界面也就是“用户界面消息”（User interface message）。用户界面消息大部分由 MediaWiki 自动生成，例如命名空间的“User”（en）和“用户”（zh），能够随 用户界面语言 改变自己改变语言；但有一部分用户界面消息来自 MediaWiki 命名空间，最常用的如 MediaWiki:Sidebar 为侧边栏（#site-navigation），其 lang 属性虽能随 用户界面语言 改变而改变，具体内容却不会自动变化，需要额外设置用户界面消息。\n清除用户界面消息缓存 作为往往在每个页面都有使用的内容，用户界面消息有着强大的缓存。根据 MediaWiki 文档，更改 wiki 语言（$wgLanguageCode）后，需清除用户界面消息缓存，否则会无法显示新语言界面消息，或新旧语言界面消息混杂。其中提供了两种方法。\n在 MediaWiki 1.18 及以上，运行\n1 echo \u0026#39;MediaWiki\\MediaWikiServices::getInstance()-\u0026gt;getMessageCache()-\u0026gt;clear()\u0026#39; | php maintenance/eval.php 在 MediaWiki 1.18 以下，则手动运行 maintenance/rebuildmessages.php。\n然而，在 Miraheze 这样的维基农场中，往往无法如此清除缓存。\n设置 $wgForceUIMsgAsContentMsg 经指点并查文档，亦可以设置 $wgForceUIMsgAsContentMsg，将用户界面消息设置为内容消息，即能够自己转换。\n显然，在维基农场中，也不可改动这个设置。\n编写自定义变体脚本 试模拟原变体功能，在内容页面右上排按钮（.mw-list-item）中添加变体按钮，加入全站加载的 MediaWiki:Common.js 中。\nopencc-js OpenCC 是非常常用的一个简繁转换工具，凭借巨大的词库，可以实现各地不同繁体的转换，故欲以此编写转换脚本。原工具为 npm 包，难以直接使用，但有衍生 JavaScript 版本 opencc-js，此处则使用此版本。\n摘抄用法如下：\n1 2 3 4 5 6 7 8 // Set Chinese convert from Traditional (Hong Kong) to Simplified (Mainland China) const converter = OpenCC.Converter({ from: \u0026#39;hk\u0026#39;, to: \u0026#39;cn\u0026#39; }); // Set the conversion starting point to the root node, i.e. convert the whole page const rootNode = document.documentElement; // Convert all elements with attributes lang=\u0026#39;zh-HK\u0026#39;. Change attribute value to lang=\u0026#39;zh-CN\u0026#39; const HTMLConvertHandler = OpenCC.HTMLConverter(converter, rootNode, \u0026#39;zh-HK\u0026#39;, \u0026#39;zh-CN\u0026#39;); HTMLConvertHandler.convert(); // Convert -\u0026gt; 汉语 HTMLConvertHandler.restore(); // Restore -\u0026gt; 漢語 由此按照 lang 属性转换的特性，可以为需转换内容设置不存在的 lang 属性，如 zh-to-convert，实现不影响其他部分的转换；对于易误转换的内容，如 textarea，也可以设置如 zh-not-convert 的 lang 属性，随后用 restore 方法转回原文。\n特别是在 MediaWiki 中，需要转换的元素主要为标题（#firstHeading）、侧边栏（#site-navigation）、内容（#mw-content-text），这些部分的特点是具有 MediaWiki 根据 站点内容语言 或 用户界面语言 设定设置的 lang 属性；然而，html 同样拥有此属性，因此不能直接根据原属性转换。\nopencc-js 亦支持自定义词典，在 wiki 实际使用中应很有用处，但暂不研究。\n外部脚本加载问题 MediaWiki 中，传统的引入外部脚本的方式为使用 mw.loader.load。\n1 mw.loader.load( \u0026#39;https://cdn.jsdelivr.net/npm/opencc-js@1.0.5/dist/umd/full.js\u0026#39; ); 然而，当网络情况不佳或脚本稍大（如 opencc-js）时，会出现未加载完成的情况。\n幸而，在 MediaWiki 1.33 中，新增了一种引入外部脚本的方式，为 mw.loader.getScript，其会传回一个 Promise 对象。无需知道 Promise 对象的含义，只需参考示例代码，就能实现外部脚本加载完后执行函数。\n1 2 3 4 mw.loader.getScript( \u0026#39;https://cdn.jsdelivr.net/npm/opencc-js@1.0.5/dist/umd/full.js\u0026#39; ) .then(function(){ // 之后执行的内容 }); 只支持 ES5 的屑 MediaWiki 调试时可能出现报错，说明只能使用 ES5 语法。ES6 2015 年即推出，目前已经普遍支持，很容易不小心写出来。例如模板字符串、箭头函数等。\n然而，在一些 MediaWiki 网站中，是可以使用 ES6 语法的，关于这一点，尚未搜索到解决方法。\n结果 以下为暂用的脚本，实现以 localStorage 存储用户偏好的变体转换，理论上可适用于所有 wiki，只需微调 CSS。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // 载入 openccjs mw.loader.getScript( \u0026#39;https://cdn.jsdelivr.net/npm/opencc-js@1.0.5/dist/umd/full.js\u0026#39; ) .then(function(){ $(function(){ // DOM 加载后操作 // 设置转换工具，简体 -\u0026gt; 港繁/台繁，台繁 -\u0026gt; 简体 const cth = OpenCC.Converter({ from: \u0026#39;cn\u0026#39;, to: \u0026#39;hk\u0026#39; }); const ttc = OpenCC.Converter({ from: \u0026#39;tw\u0026#39;, to: \u0026#39;cn\u0026#39; }); const ctt = OpenCC.Converter({ from: \u0026#39;cn\u0026#39;, to: \u0026#39;tw\u0026#39; }); // 设置必要的 lang 属性以备后续转换 $(\u0026#39;#firstHeading\u0026#39;).attr(\u0026#39;lang\u0026#39;, \u0026#39;zh-to-convert\u0026#39;); $(\u0026#39;#site-navigation ul\u0026#39;).attr(\u0026#39;lang\u0026#39;, \u0026#39;zh-to-convert\u0026#39;); $(\u0026#39;#site-navigation h3\u0026#39;).attr(\u0026#39;lang\u0026#39;, \u0026#39;zh-to-convert\u0026#39;); $(\u0026#39;#mw-content-text\u0026#39;).attr(\u0026#39;lang\u0026#39;, \u0026#39;zh-to-convert\u0026#39;); if($(\u0026#39;textarea\u0026#39;)) { $(\u0026#39;textarea\u0026#39;).attr(\u0026#39;lang\u0026#39;, \u0026#39;zh-not-convert\u0026#39;); } // 检查 localStorage 并转换 const rootNode = document.documentElement; const HTMLConvertHandler = { \u0026#34;cn\u0026#34;: OpenCC.HTMLConverter(ttc, rootNode, \u0026#39;zh-to-convert\u0026#39;, \u0026#39;zh-CN\u0026#39;), \u0026#34;hk\u0026#34;: OpenCC.HTMLConverter(cth, rootNode, \u0026#39;zh-to-convert\u0026#39;, \u0026#39;zh-HK\u0026#39;), \u0026#34;tw\u0026#34;: OpenCC.HTMLConverter(ctt, rootNode, \u0026#39;zh-to-convert\u0026#39;, \u0026#39;zh-TW\u0026#39;), } if (localStorage.getItem(\u0026#39;opencc\u0026#39;)) { HTMLConvertHandler[localStorage.getItem(\u0026#39;opencc\u0026#39;)].convert(); $(\u0026#39;#opencc\u0026#39;).val(localStorage.getItem(\u0026#39;opencc\u0026#39;)); } // 插入样式和按钮 $(\u0026#39;\u0026lt;style\u0026gt;.mw-list-item select {color: #68d;padding: inherit;padding-right: 2em;background-color: transparent;cursor: pointer;border: none;}.mw-list-item select:hover {border: none;}\u0026lt;/style\u0026gt;\u0026#39;).appendTo(\u0026#39;body\u0026#39;); $(\u0026#39;\u0026lt;li class=\u0026#34;mw-list-item\u0026#34;\u0026gt;\u0026lt;select name=\u0026#34;opencc\u0026#34; id=\u0026#34;opencc\u0026#34;\u0026gt;\u0026lt;option value=\u0026#34;\u0026#34;\u0026gt;不转换\u0026lt;/option\u0026gt;\u0026lt;option value=\u0026#34;cn\u0026#34;\u0026gt;大陆简体\u0026lt;/option\u0026gt;\u0026lt;option value=\u0026#34;hk\u0026#34;\u0026gt;港澳繁体\u0026lt;/option\u0026gt;\u0026lt;option value=\u0026#34;tw\u0026#34;\u0026gt;台湾繁体\u0026lt;/option\u0026gt;\u0026lt;/select\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;).appendTo($(\u0026#39;#p-views ul\u0026#39;)); // 用户修改变体后，设置 localStorage 并刷新 $(\u0026#39;#opencc\u0026#39;).change(function() { localStorage.setItem(\u0026#39;opencc\u0026#39;, event.target.value); location.reload(); }); }); }); 效果如下：\n补遗 The site content language (ContentLanguage service in MediaWiki\\MediaWikiServices::getContentLanguage, based on $wgLanguageCode), which should generally stay the same as long as the wiki exists.\n最好的方法永远是保证最开始设置正确，权宜之计终归是权宜之计。利用这个脚本，可以实现对页面内容的正确变体转换，然而，在实际使用中，还有一些问题：\n需要额外创建繁体标题重定向 不支持转换后变体的搜索 关于第一点，在这篇文章中修修补补给出了解决方法。关于第二点，考虑到小 wiki 对搜索正文内容的需求不是很大，暂时只能如此了。\n","date":"2023-11-28T00:00:00Z","permalink":"https://omvjro.github.io/p/mediawiki-%E8%AF%AD%E8%A8%80%E5%8F%98%E4%BD%93%E6%9D%83%E5%AE%9C%E4%B9%8B%E8%AE%A1/","title":"MediaWiki 语言变体权宜之计"}]